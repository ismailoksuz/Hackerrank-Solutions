Population Census:
Given the CITY and COUNTRY tables, query the sum of the populations of all cities where the CONTINENT is 'Asia'.

Select SUM(c.Population)
From City c inner join Country ct on c.CountryCode=ct.Code
Where ct.Continent='Asia'
----------------------------------------------------------------------------------------------------------------------------------------
African Cities:
Given the CITY and COUNTRY tables, query the names of all cities where the CONTINENT is 'Africa'.

Select c.Name
From City c inner join Country ct on c.CountryCode=ct.Code
Where ct.Continent = 'Africa'
----------------------------------------------------------------------------------------------------------------------------------------
Average Population of Each Continent:
Given the CITY and COUNTRY tables, query the names of all the continents (COUNTRY.Continent) 
and their respective average city populations (CITY.Population) rounded down to the nearest integer.

Select ct.Continent, AVG(c.Population)
From City c inner join Country ct on c.CountryCode=ct.Code
Group by ct.Continent
----------------------------------------------------------------------------------------------------------------------------------------
The Report:
Ketty gives Eve a task to generate a report containing three columns: Name, Grade and Mark. Ketty doesn't want the NAMES of those 
students who received a grade lower than 8.The report must be in descending order by grade -- i.e. higher grades are entered first. 
If there is more than one student with the same grade (8-10) assigned to them, order those particular students by their name alphabetically. 
Finally, if the grade is lower than 8, use "NULL" as their name and list them by their grades in descending order.If there is more than 
one student with the same grade (1-7) assigned to them, order those particular students by their marks in ascending order.
Write a query to help Eve.

Select CASE 
    WHEN g.grade < 8 then NULL
    ELSE s.name END, g.grade, s.marks
From students s inner join grades g on s.marks >= g.min_mark and s.marks <= g.max_mark
Order by g.grade desc, s.name
----------------------------------------------------------------------------------------------------------------------------------------
Top Competitors:
Julia just finished conducting a coding contest, and she needs your help assembling the leaderboard! Write a query to print the respective 
hacker_id and name of hackers who achieved full scores for more than one challenge. Order your output in descending order by the 
total number of challenges in which the hacker earned a full score. If more than one hacker received full scores in same number of challenges, 
then sort them by ascending hacker_id.

Select h.hacker_id, h.name 
From Hackers h inner join Submissions s on h.hacker_id = s.hacker_id inner join Challenges c on s.challenge_id = c.challenge_id inner join Difficulty d on c.Difficulty_level = d.Difficulty_level
Where d.score = s.score 
Group by h.hacker_id, h.name 
Having count(c.challenge_id) > 1
Order by count(c.challenge_id) desc, h.hacker_id
----------------------------------------------------------------------------------------------------------------------------------------
Ollivander's Inventory:
Harry Potter and his friends are at Ollivander's with Ron, finally replacing Charlie's old broken wand.Hermione decides the best way to choose 
is by determining the minimum number of gold galleons needed to buy each non-evil wand of high power and age. Write a query to print the id, 
age, coins_needed, and power of the wands that Ron's interested in, sorted in order of descending power.If more than one wand has same power, 
sort the result in order of descending age.

Select w.id, wp.age, w.coins_needed, w.power
From Wands w inner join Wands_Property wp on w.code=wp.code
Where  w.coins_needed= (
    Select MIN(w2.coins_needed) 
    From Wands w2 inner join Wands_Property wp2 on w2.code=wp2.code
    Where wp.age=wp2.age and w.power=w2.power
) and wp.is_evil=0 
Order by w.power desc, wp.age desc
----------------------------------------------------------------------------------------------------------------------------------------
Challenges:
Julia asked her students to create some coding challenges. Write a query to print the hacker_id, name, and the total number of challenges 
created by each student. Sort your results by the total number of challenges in descending order. If more than one student created the same 
number of challenges, then sort the result by hacker_id. If more than one student created the same number of challenges and the count is less 
than the maximum number of challenges created, then exclude those students from the result.

Select h.hacker_id, h.name, Count(c.challenge_id) cnt
From Hackers H inner join Challenges c on h.hacker_id = c.hacker_id
Group by h.hacker_id, h.name
Having count(c.challenge_id) = (Select TOP 1 count(c2.challenge_id) cnt2
                                From challenges c2
                                Group by c2.hacker_id
                                Order by cnt2 desc)
or Count(c.challenge_id) in(Select Distinct cnt3 
                            From (Select h3.hacker_id, h3.name, count(c3.challenge_id) as cnt3
                                  From Hackers h3 inner join Challenges c3 on h3.hacker_id = c3.hacker_id
                                  Group by h3.hacker_id, h3.name
) iso
    Group by cnt3
Having Count(cnt3) =1)
Order by cnt desc, h.hacker_id
----------------------------------------------------------------------------------------------------------------------------------------
Contest Leaderboard:
You did such a great job helping Julia with her last coding contest challenge that she wants you to work on this one, too!
The total score of a hacker is the sum of their maximum scores for all of the challenges. Write a query to print the hacker_id, name, 
and total score of the hackers ordered by the descending score. If more than one hacker achieved the same total score, then sort 
the result by ascending hacker_id. Exclude all hackers with a total score of  from your result.

Select h.hacker_id,h.name,SUM(s2s)
From Hackers h inner join (Select hacker_id,MAX(score) as s2s 
                           From Submissions 
                           Group by hacker_id,challenge_id) s2 
                           on h.hacker_id=s2.hacker_id
Group by h.hacker_id,h.name
Having SUM(s2s)>0
Order by SUM(s2s) desc,h.hacker_id

